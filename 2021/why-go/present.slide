# Why Is Go Becoming So Popular?

8 September 2021
Tags: Golang

Ole Bulbuk, NewStore
@flowdev_org (Twitter)
@ole108 (Gopher Slack)
Attributions for images:
All Gophers have been taken from Maria Letta's excellent 'free-gophers-pack'.


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development

: NEXT: Golang: Read A File


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development
- Almost 20 years of Java

: NEXT: Golang: Read A File


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development
- Almost 20 years of Java
- 6 years of Go

: NEXT: Golang: Read A File


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development
- Almost 20 years of Java
- 6 years of Go
- 4 years co-organizer of Berlin Go meetup

: NEXT: Golang: Read A File


## Let's Read A File

.code code/read_file.go

: NEXT: Can be done in any language


## That Is Boring
.background images/sleepy.png

- You can read a file in a similar way in almost any programming language


## That Is Boring
.background images/sleepy.png

- You can read a file in a similar way in almost any programming language
- JavaScript is an exception because it only offers asynchronous IO


## That Is Boring
.background images/sleepy.png

- You can read a file in a similar way in almost any programming language
- JavaScript is an exception because it only offers asynchronous IO
- It looks like between a scripting and a traditional compiled language


## What Would Be Cool
.background images/cool.png

- Asynchronous IO is needed for high scalability

: NEXT: Golang: Google search


## What Would Be Cool
.background images/cool.png

- Asynchronous IO is needed for high scalability
- Performing other tasks while waiting for IO

: NEXT: Golang: Google search


## What Would Be Cool
.background images/cool.png

- Asynchronous IO is needed for high scalability
- Performing other tasks while waiting for IO
- No long (multiple milliseconds) garbage collection breaks

: NEXT: Golang: Google search


## What Would Be Cool
.background images/cool.png

- Asynchronous IO is needed for high scalability
- Performing other tasks while waiting for IO
- No long (multiple milliseconds) garbage collection breaks
- And Go does this automatically behing the scenes

: NEXT: Golang: Google search


## What Would Be Cool
.background images/cool.png

- Asynchronous IO is needed for high scalability
- Performing other tasks while waiting for IO
- No long (multiple milliseconds) garbage collection breaks
- And Go does this automatically behing the scenes
- Without any callbacks or reactive libs

: NEXT: Golang: Google search


## What Would Be Cool
.background images/cool.png

- Asynchronous IO is needed for high scalability
- Performing other tasks while waiting for IO
- No long (multiple milliseconds) garbage collection breaks
- And Go does this automatically behing the scenes
- Without any callbacks or reactive libs
- The same goes for network IO, of course

: NEXT: Golang: Google search


## What Would Be Cool
.background images/cool.png

- Asynchronous IO is needed for high scalability
- Performing other tasks while waiting for IO
- No long (multiple milliseconds) garbage collection breaks
- And Go does this automatically behing the scenes
- Without any callbacks or reactive libs
- The same goes for network IO, of course
- This enables high throughput and low latency services

: NEXT: Golang: Google search


## What Would Be Cool
.background images/cool.png

- Asynchronous IO is needed for high scalability
- Performing other tasks while waiting for IO
- No long (multiple milliseconds) garbage collection breaks
- And Go does this automatically behing the scenes
- Without any callbacks or reactive libs
- The same goes for network IO, of course
- This enables high throughput and low latency services
- In this way Go is very simple

: NEXT: Golang: Google search


## Implementing "Google Search"

.code code/google.go


## More Resilience Patterns

- Timeouts are handled with help of the standard library


## More Resilience Patterns

- Timeouts are handled with help of the standard library
- Other resilience patterns are implemented in OpenSource libs


## More Resilience Patterns

- Timeouts are handled with help of the standard library
- Other resilience patterns are implemented in OpenSource libs
- They use the same simple approach


## Other Features

- Layers of abstraction are frowned upon

## Other Features

- Layers of abstraction are frowned upon
- Most of the standard library is only 1 to 3 calls deep

## Other Features

- Layers of abstraction are frowned upon
- Most of the standard library is only 1 to 3 calls deep
- I never had to debug more than 5 calls into any dependency

## Other Features

- Layers of abstraction are frowned upon
- Most of the standard library is only 1 to 3 calls deep
- I never had to debug more than 5 calls into any dependency
- Most functions fit on a screen

## Other Features

- Layers of abstraction are frowned upon
- Most of the standard library is only 1 to 3 calls deep
- I never had to debug more than 5 calls into any dependency
- Most functions fit on a screen
- Even the heart of the runtime system is quite simple

## Other Features

- Layers of abstraction are frowned upon
- Most of the standard library is only 1 to 3 calls deep
- I never had to debug more than 5 calls into any dependency
- Most functions fit on a screen
- Even the heart of the runtime system is quite simple
- Bugs in dependencies can be easily discovered and fixed

## Other Features

- Layers of abstraction are frowned upon
- Most of the standard library is only 1 to 3 calls deep
- I never had to debug more than 5 calls into any dependency
- Most functions fit on a screen
- Even the heart of the runtime system is quite simple
- Bugs in dependencies can be easily discovered and fixed
- That is a good tradition in the Go world and really doable

